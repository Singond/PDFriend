total_time=PDFriend finished in {} ms

#
# Arguments input
#
unknownCommand='{}' is not a PDFriend command
parse_length=Parsing length from string: {}
parse_length_unit=Parsing length unit from string: {}
parse_rectangle=Parsing rectangle dimensions: {}
parse_rectangle_success=Parsed the input as dimensions: {}
parse_margins_success=Parsed the input as margins: {}
parse_orientation_both=Ambiguous sheet orientation: Cannot set --portrait and --landscape at the same time
parse_orientation_ignored=Setting page orientation is only supported when --sheet-size is also set. Switch {} ignored.

#
# Data input
#
readFile=Loading file: {}
readFile_done=Finished loading file: {}
# Parsing
parse_pdf=Parsing as PDF

#
# Virtual Document
#
vpage_building=Building VirtualPage [%.0f x %.0f] with %d pieces of content
vpage_overwritingContent=Page {} was not empty before setting its content; overwriting
vdoc_concatenating=Concatenating {} documents

#
# Imposition
#
preprocess_cellSize_resolve=Resolving cell dimensions for {} with following settings: {}
preprocess_cellSize_resolvePref=Determining preferred cell size
preprocess_cellSize_fromPageScale=Circumscribing the cell to the all pages of the document scaled by {} and rotated by {}
preprocess_cellSize_fromPageDimensions=Circumscribing the cell to a rectangle of {} rotated by {}
preprocess_cellSize_explicit=Cell size has been explicitly given as {}
preprocess_cellSize_result=Cell dimensions set to {} including margins, the content dimensions are {}
preprocess_pageScale_default=No page size or scale given. Using default value of {}
preprocess_pageScale_explicit=Page scale has been explicitly given as {}
preprocess_pageScale_fromPage=Determining page scale from page size: Page size is {}, resulting scale is {}
preprocess_pageSize_cell=Positioning page of size {} into cell of size {}
preprocess_pageSize_fromPage=Page box is equal to page boundary
preprocess_pageSize_fromPageAndScale=Page size ambiguity: Scale has been set to {} and page dimensions have been set to {} ({} times larger than the original). \
Page box is {} times the size of the page.
preprocess_position_cached=Position has already been calculated for these dimensions. Using the cached value of {}
preprocess_position_final=Pre-processing page {}: transforming by {}
#preprocess_page_resizeNone=
#preprocess_page_resizeFit=Fitting rectangle {} into cell
#preprocess_page_resizeFill=Filling cell by rectangle {}
#preprocess_page_calculated=Position of rectangle {} is {}

# Constructing
preprocess_start=Preprocessing pages...
preprocess_skip=Skipping preprocessing (no option has been set)

imposition_preprocessSettings=The preprocess settings are: {}
imposition_commonSettings=The general imposition settings are: {}
imposition_imposableSettings=The {} settings are: {}

booklet_constructing=Constructing a new Booklet of {} pages
booklet_padding=The number of pages in the booklet is not divisible by 4. To correct this, {} blank pages will be added to the end.

nup_pageSizeToSheetSize=Page size is "auto"; using the sheet size as the page size
nup_caseSize=Determining page size from cell count, cell size and margins (case A)
nup_caseGrid=Determining cell count from page size, cell size and margins (case D)
nup_caseMargins=Determining margins from page size, cell size and cell count (case B)
nup_caseCell=Determining cell size from page size, cell count and margins (case C)
nup_caseConflict=Conflicting n-up settings: cell count (rows and columns), page size, margins and cell size are all set to non-auto value
nup_margins=The margins are {} (left, right, bottom, top)
nup_marginsResolveAuto=Resolving automatic margins to {} (left, right, bottom, top)
nup_gridDimensions=The grid dimensions are {}x{} (rows x columns)
nup_gridCount=There are {} input pages per one output page
nup_setResizingToFit=Cell size is being determined dynamically; setting resizing behaviour to "fit"
#nup_settingPagesNo=Setting the number of pages to {}
nup_finalSettings=Imposing {}x{} pages of size {} at scale {}, rotation {}, resizing {} and alignment {} onto a sheet \
of size {}, offset by {} horizontally and {} vertically, into grid oriented {}, filled {}
nup_pageCountPartial=Printing first {} pages
nup_pageCountAll=Setting the number of pages to {} in order to fit the whole document

overlay_constructing=Constructing a new Overlay of {} pages and {} layers
overlay_filling=Filling Overlay with pages of source documents
overlay_setupFinished=Finished constructing and setting up Overlay

leaf_degeneratePosition=Bad position of leaf {}. The matrix has zero determinant; this means the page will degenerate to a single line or point
leaf_mirroredFront=Unlikely position of leaf {}. The leaf is mirrored.
leaf_mirroredFront_detail=Leaf {}: The front position matrix has negative determinant; this means the page will be mirrored when printed.
leaf_mirroredBack=Unlikely position of leaf {}. The leaf is mirrored.
leaf_mirroredBack_detail=Leaf {}: The back position matrix has positive determinant; this means the page will be mirrored when printed.
leaf_rectoEven=Leaf {} is being numbered from even number. It is usual for leaf to be numbered from odd number.

# Rendering progress
leaf_imposingPage=Imposing page {}

page_rendering=Rendering page {} directly into a new virtual page

sheet_renderingFront=Rendering front side of sheet {} into a new virtual page
sheet_renderingBack=Rendering back side of sheet {} into a new virtual page

signature_numbering=Numbering signature {} starting with number {}
signature_rendering=Rendering sheets of signature {}
signature_renderingSheet=Rendering sheet {}

volume_rendering=Rendering volume {}
volume_saving=Saving {} to {}

stack_gatherOne=Stack manipulation: Number of Stacks to be gathered is one; this operation will not do anything.

layerSP_queueEmpty=There are no more source pages available for layer {} from page {} onwards
layerSP_tooManyLayersInPage=The layered page has {0} layers while this source provider only has {1}. \
Source pages will only be set for the lowest {1} layers.

#
# Data output
#
render_doc=Rendering document {}
render_page=Rendering page {}
render_content=Rendering {} pieces of content of page {}
render_pageBlank=Page {} is blank
render_pdf_matrix=Rendering {} with transformation {}
render_pdf_workaround=The rotation of page {} is {}. Applying scale correction to prevent stretching the page when imposed
render_pdf_ioException=An I/O Exception occured when imposing page {} onto target page {}.

writeFile=Writing file: {}
writeFile_done=Finished writing file: {}
